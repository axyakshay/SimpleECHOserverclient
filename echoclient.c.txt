/* 
 * echoclient.c - A simple connection-based client
 * usage: echoclient <host> <port>
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#include <errno.h>
//#include "unp.h"

#define BUFFERSIZE 1024

int bufferread(int socketfd, char *buffer)
{ 
	static char *buffer_ptr;
	static char buffer_own[BUFFERSIZE];
	static int recdcount;
 	
	while(recdcount<=0){
        	recdcount=read(socketfd, buffer_own, sizeof(buffer_own));
		if (recdcount < 0){    
			if (errno==EINTR)           //EINTR-Slow system call, the read is issued again
				continue;
			else if (errno)
				return (-1);
			}
		else if (recdcount == 0){   
			return recdcount;
			}
		else{ 
			buffer_ptr=buffer_own;     //Working. Making the pointer point to the read buffer value
                        break;
			}
		}

        recdcount--;
	*buffer=*buffer_ptr++;
	return (1);
} 
	

int readline(int socketfd, void *buffer, size_t maxlinelength)
{
	char c, *buffer_readline=buffer;
        int readcount, i=1;

	for(i=1; i < maxlinelength; i++){
		readcount = bufferread(socketfd, &c);

        	if (readcount == 1) {
                	*buffer_readline++ = c;
             		if (c  == '\n')
                		break;       // newline is stored, exiting while loop to null terminate;
        	} 
		else if (readcount == 0) {
	     		printf ("Server is down \n");
            		*buffer_readline= 0;
             		return (i - 1);     // EOF reached and null terminated
       	  	} 
		else
             		return (-1);        // error
     	}

     	*buffer_readline  = 0;                  // null terminate like fgets() 
     	return i ;
}

int writen(int socketfd, const void *buffer, size_t n)          // Write n" bytes to a descriptor
{
	const char *buffer_ptr = buffer;
	size_t bytesleft = n;
     	size_t byteswritten;	

    	while (bytesleft> 0) {             //Still bytes left to read
		byteswritten = write(socketfd, buffer_ptr, bytesleft);
          	if (byteswritten <= 0) {     //if bytes written is not a positive number
           		if ((errno == EINTR) && (byteswritten < 0)){
                  		byteswritten = 0; 
		  	}
             		else
                		return (-1);    //error
          	}

          	bytesleft -= byteswritten; //bytesleft decremented to reflect the current value
          	buffer_ptr+= byteswritten;  //pointer is incremented to reflect the current value
     	}
    	return (n);
}


int main(int argc, char **argv) {

    int sockfd, value;
    char buffer[BUFFERSIZE];
    struct sockaddr_in servaddr;

    // verify if proper command line inputs are received */
    if (argc != 3) {
       fprintf(stderr,"expected inputs: %s <hostname> <port>\n", argv[0]);
       exit(0);
    }

    char * hostname = argv[1];
    int portnum = atoi(argv[2]);

    //socket creation and error checking
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0){
        perror("Socket creation error");
	exit(0);
	}

    //Server IP address

    bzero((char *) &servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(portnum);

    if (inet_pton(AF_INET, hostname, &servaddr.sin_addr)<=0)
    	{perror("inet_pton error");
	 exit(1);
         }

    // connect: to the server

    if (connect(sockfd, (const struct sockaddr*) &servaddr, sizeof(servaddr)) < 0) 
       {perror ("Server connection error");
       exit(0);}

    //Echo functionality starts

    while(1){
	bzero(buffer, BUFFERSIZE);
        printf ("Enter  message: ");
        //Receive input from user and if its EOF, quit
   	if(fgets(buffer, BUFFERSIZE, stdin)==NULL){
		printf ("End of file reached \n");
                break;
		}
       
    //Write the value to the socket. Check errors     
    value = writen(sockfd, buffer, strlen(buffer));

    if (value < 0){
	perror("ERROR writing to socket");
	exit(0);
	}

    bzero(buffer, BUFFERSIZE);
    value = readline(sockfd, buffer, BUFFERSIZE);

    if (value < 0){
	perror("ERROR reading from socket");
    	exit(0);
	}
    
    printf ("Echoed message: ");
    fputs((const char*)buffer, stdout); 
    printf("\n");
    }
    
    //closing the socket
    close(sockfd);
    return 0;
}

